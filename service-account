##first we will create an csr certificate. 
  sudo -i
  rm *.pem
  #############################lets create an csr certificate for user jane
root@docker:~# openssl genrsa -out jane.key 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
.......................+++++
.........+++++
e is 65537 (0x010001)
  ##convert this key into an csr certificate
root@docker:~# openssl req -new -key jane.key -out jane.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:jane ###in the common name do not forget to put the name of the user to whom you are creating the certificate
Email Address []:
##########################################################
  if you do ls
  $$$you will see jane.csr and jane.key
#########################do not open the csr certificate in plain text format use base64 encoded format so that it will not be currupted
361  cat jane.csr |  base64
##this below command -w 0 will remove all the line breaks
  362  cat jane.csr |  base64 -w 0
########lets create a csr file and import or csr key
https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/
###
from the documetnation
###################################################### #replace the to do with your base 64 encoded key
vi csr.yml
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: jane
spec:
  
  
  request: todo 
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - client auth
##kubectl apply -f csr.yml
kubectl get csr
#lets approve the certificate 
374  kubectl certificate approve jane
  375  kubectl get csr
###the last command will show that jane certificate is being approved
  376  kubectl get csr jane -o yaml
##once you got the output 
conver the same into an CSR file 
echo key | base64 -d > jane.crt
##you will see that csr is being imported 
##to verify the certificate has been imported or not 
 kubectl edit csr jane
#########################
379  kubectl config view #this will give you the existing user or sa access which is allowed
  380  kubectl config
  381  kubectl config  set-credentials

####user jane set
root@docker:~# kubectl config set-credentials jane --client-certificate=jane.crt --client-key=jane.key
User "jane" set.
###once we add jane user to the configuration
 kubectl config view
##this will show that jane is imported in the kubernetes api
##next we need to work as jane user
394  kubectl config set-context jane --user=jane --cluster=kubernetes
##this will show jane can be user as user
  395  kubectl config get-contexts
##move to jane user
  398  kubectl config use-context jane
##this will point to jane user
  399  kubectl config get-contexts
##jane do not have access to namesapce
  400  kubectl get ns
##jane has access to secrets in blue namespace
  401  kubectl -n blue get secretes
##checking jane can delete all the deployment in all the namespace as we have cluster role and clusterolebinding
  402  kubectl auth can-i delete deployment -A
###switch back to the admin
  403  kubectl config use-context kubernetes-admin@kubernetes
 399  kubectl config get-contexts
###lets create a secret using admin user 
403  kubectl config use-context kubernetes-admin@kubernetes
 427  kubectl -n blue create secret generic my-secret --from-literal=key1=supersecret
  428  kubectl get secret -n blue
##swiotch to jane user 
 430  kubectl config use-context jane
  431  kubectl -n blue get secrets
 ##this will not work as we have given only get and list access to user jane 
  433  kubectl -n blue delete secrets my-secret
##switch back to admin user
  434  411  kubectl config use-context kubernetes-admin@kubernetes
